# -*- coding: utf-8 -*-
"""dsfm_2018-2022.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xdCFcQcveEpEL0TpzRI0zBJxFQXIpBqh
"""

from google.colab import drive
drive.mount('/content/drive')

import yfinance as yf
import pandas as pd
import datetime

# Define the indices and their ticker symbols
tickers = {
    "SENSEX": "^BSESN",
    "NIKKEI_225": "^N225",
    "SSECI": "000001.SS",
    "DAX": "^GDAXI",
    "CAC40": "^FCHI",
    "S&P500": "^GSPC",
    "NASDAQ100": "^NDX",
    "DOW_JONES": "^DJI",
    "HANG_SENG": "^HSI"
}

# Define the start and end dates
start_date = "2018-01-01"
end_date = "2022-12-31"

# Create an empty DataFrame to store closing prices
closing_prices = pd.DataFrame()

# Download data for each ticker
for name, ticker in tickers.items():
    print(f"Downloading data for {name} ({ticker})...")
    data = yf.download(ticker, start=start_date, end=end_date)
    closing_prices[name] = data["Close"]

# Format the index to display only the date
closing_prices.index = closing_prices.index.date

# Reset the index to include the date as a column with the name 'Date'
closing_prices.reset_index(inplace=True)
closing_prices.rename(columns={"index": "Date"}, inplace=True)

# Define the file path
file_path = "/content/drive/MyDrive/DSFM Project/indices_closing_prices.csv"

# Save to CSV file
closing_prices.to_csv(file_path, index=False)

print(f"Closing prices saved to {file_path}")

import pandas as pd
import numpy as np
from google.colab import drive

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_closing_prices.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Set the 'Date' column as the index
data.set_index("Date", inplace=True)

# Calculate log returns for each column
log_returns = np.log(data / data.shift(1))

# Drop the first row with NaN values caused by the shift operation
log_returns = log_returns.dropna()

# Save log returns to a new CSV file in Google Drive
log_returns_file = "/content/drive/MyDrive/DSFM Project/indices_log_returns.csv"
log_returns.to_csv(log_returns_file)

print(f"Log returns saved to {log_returns_file}")

import pandas as pd
import numpy as np
from google.colab import drive

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_closing_prices.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Set 'Date' column as the index
data.set_index("Date", inplace=True)

# Calculate daily returns for each column
# Formula: (Price_t - Price_t-1) / Price_t-1
returns = data.pct_change()

# Drop the first row with NaN values caused by the shift operation
returns = returns.dropna()

# Save daily returns to a new CSV file in Google Drive
returns_file = "/content/drive/MyDrive/DSFM Project/indices_daily_returns.csv"
returns.to_csv(returns_file)

print(f"Daily returns saved to {returns_file}")

import pandas as pd
from google.colab import drive


# Read the CSV file containing the daily closing prices
csv_file = "/content/drive/MyDrive/DSFM Project/indices_closing_prices.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Set 'Date' column as the index
data.set_index("Date", inplace=True)

# Resample the data to monthly frequency and take the last closing price of each month
monthly_data = data.resample('M').last()

# Save the monthly closing prices to a new CSV file in Google Drive
monthly_data_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_closing_prices.csv"
monthly_data.to_csv(monthly_data_file)

print(f"Monthly closing prices saved to {monthly_data_file}")

import pandas as pd
import numpy as np
from google.colab import drive

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_closing_prices.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Set the 'Date' column as the index
data.set_index("Date", inplace=True)

# Calculate log returns for each column
log_returns = np.log(data / data.shift(1))

# Drop the first row with NaN values caused by the shift operation
log_returns = log_returns.dropna()

# Save log returns to a new CSV file in Google Drive
log_returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_log_returns.csv"
log_returns.to_csv(log_returns_file)

print(f"Log returns saved to {log_returns_file}")

import pandas as pd
import numpy as np
from google.colab import drive

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_closing_prices.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Set 'Date' column as the index
data.set_index("Date", inplace=True)

# Calculate monthly returns for each column (percentage returns)
# Formula: ((Price_t - Price_t-1) / Price_t-1) * 100
returns = data.pct_change() * 100

# Drop the first row with NaN values caused by the shift operation
returns = returns.dropna()

# Save monthly returns to a new CSV file in Google Drive
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
returns.to_csv(returns_file)

print(f"Monthly returns saved to {returns_file}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tabulate import tabulate

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Filter data for the year 2022
data_2022 = data[(data["Date"] >= "2022-01-01") & (data["Date"] <= "2022-12-31")]

# Drop the Date column for calculations
data_2022 = data_2022.drop(columns=["Date"])

# Calculate statistics
stats = {
    "Particulars": [
        "Mean", "Standard Error", "Median", "Stan Deviation", "Sample Var",
        "Kurtosis", "Skewness", "Range", "Minimum", "Maximum", "Sum", "Count"
    ]
}

# Perform calculations for each index
for col in data_2022.columns:
    col_stats = [
        np.mean(data_2022[col]),
        np.std(data_2022[col]) / np.sqrt(len(data_2022[col])),  # Standard Error
        np.median(data_2022[col]),
        np.std(data_2022[col]),  # Standard Deviation
        np.var(data_2022[col]),  # Sample Variance
        data_2022[col].kurtosis(),  # Kurtosis
        data_2022[col].skew(),  # Skewness
        np.max(data_2022[col]) - np.min(data_2022[col]),  # Range
        np.min(data_2022[col]),
        np.max(data_2022[col]),
        np.sum(data_2022[col]),
        len(data_2022[col])
    ]
    stats[col] = col_stats

# Convert stats dictionary to DataFrame
stats_df = pd.DataFrame(stats)

# Display the table
print("Table 1. Descriptive statistics of popular international indices for the period of one year (2022)")
print(tabulate(stats_df, headers="keys", tablefmt="grid"))

# Save table as an image
fig, ax = plt.subplots(figsize=(12, 6))
ax.axis("tight")
ax.axis("off")
table = ax.table(cellText=stats_df.values, colLabels=stats_df.columns, loc="center", cellLoc="center")

# Save as an image file
image_path = "/content/drive/MyDrive/DSFM Project/descriptive_statistics.png"
plt.savefig(image_path, bbox_inches="tight", dpi=300)

print(f"Descriptive statistics table saved as an image at {image_path}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import drive

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Filter the data for the year 2022
data['Year'] = data['Date'].dt.year
data_2022 = data[data['Year'] == 2022].drop(columns=['Year'])

# Set 'Date' as the index
data_2022.set_index("Date", inplace=True)

# Calculate Pearson's correlation coefficients
correlation_matrix = data_2022.corr(method='pearson')

# Plot the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(
    correlation_matrix,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    linewidths=0.5,
    annot_kws={"size": 10}
)
plt.title("Pearsonâ€™s correlation coefficients of popular international stock indices for the one-year (2022) period", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()

# Save the plot as an image in Google Drive
correlation_plot_file = "/content/drive/MyDrive/DSFM Project/indices_correlation_2022.png"
plt.savefig(correlation_plot_file, dpi=300)
plt.show()

print(f"Correlation plot saved to {correlation_plot_file}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tabulate import tabulate

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Filter data for the years 2020 to 2022
data_filtered = data[(data["Date"] >= "2020-01-01") & (data["Date"] <= "2022-12-31")]

# Drop the Date column for calculations
data_filtered = data_filtered.drop(columns=["Date"])

# Calculate statistics
stats = {
    "Particulars": [
        "Mean", "Standard Error", "Median", "Stan Deviation", "Sample Var",
        "Kurtosis", "Skewness", "Range", "Minimum", "Maximum", "Sum", "Count"
    ]
}

# Perform calculations for each index
for col in data_filtered.columns:
    col_stats = [
        np.mean(data_filtered[col]),
        np.std(data_filtered[col]) / np.sqrt(len(data_filtered[col])),  # Standard Error
        np.median(data_filtered[col]),
        np.std(data_filtered[col]),  # Standard Deviation
        np.var(data_filtered[col]),  # Sample Variance
        data_filtered[col].kurtosis(),  # Kurtosis
        data_filtered[col].skew(),  # Skewness
        np.max(data_filtered[col]) - np.min(data_filtered[col]),  # Range
        np.min(data_filtered[col]),
        np.max(data_filtered[col]),
        np.sum(data_filtered[col]),
        len(data_filtered[col])
    ]
    stats[col] = col_stats

# Convert stats dictionary to DataFrame
stats_df = pd.DataFrame(stats)

# Display the table
print("Table 2. Descriptive statistics of popular international indices for the period of three years (2020-2022)")
print(tabulate(stats_df, headers="keys", tablefmt="grid"))

# Save table as an image
fig, ax = plt.subplots(figsize=(12, 6))
ax.axis("tight")
ax.axis("off")
table = ax.table(cellText=stats_df.values, colLabels=stats_df.columns, loc="center", cellLoc="center")

# Save as an image file
image_path = "/content/drive/MyDrive/DSFM Project/descriptive_statistics_2020_2022.png"
plt.savefig(image_path, bbox_inches="tight", dpi=300)

print(f"Descriptive statistics table saved as an image at {image_path}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import drive

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Filter the data for the years 2020 to 2022
data['Year'] = data['Date'].dt.year
data_2020_2022 = data[data['Year'].between(2020, 2022)].drop(columns=['Year'])

# Set 'Date' as the index
data_2020_2022.set_index("Date", inplace=True)

# Calculate Pearson's correlation coefficients
correlation_matrix = data_2020_2022.corr(method='pearson')

# Plot the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(
    correlation_matrix,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    linewidths=0.5,
    annot_kws={"size": 10}
)
plt.title("Pearsonâ€™s correlation coefficients of popular international stock indices for the 2020-2022 period", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()

# Save the plot as an image in Google Drive
correlation_plot_file = "/content/drive/MyDrive/DSFM Project/indices_correlation_2020_2022.png"
plt.savefig(correlation_plot_file, dpi=300)
plt.show()

print(f"Correlation plot saved to {correlation_plot_file}")

import pandas as pd
import statsmodels.api as sm
from google.colab import drive

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Filter the data for the years 2020 to 2022
data['Year'] = data['Date'].dt.year
data_2020_2022 = data[data['Year'].between(2020, 2022)].drop(columns=['Year'])

# Set 'Date' as the index
data_2020_2022.set_index("Date", inplace=True)

# Extract BSE as the dependent variable and all others as independent variables
y = data_2020_2022['SENSEX']  # Dependent variable (BSE)
X = data_2020_2022.drop(columns=['SENSEX'])  # Independent variables (All others)

# Add a constant to the independent variables matrix (for the intercept term)
X = sm.add_constant(X)

# Fit the linear regression model
model = sm.OLS(y, X).fit()

# Get the R-squared value
r_squared = model.rsquared

# Display the results
print(f"R-squared value for BSE as the dependent variable: {r_squared:.4f}")

import pandas as pd
import statsmodels.api as sm
from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Filter the data for the years 2020 to 2022
data['Year'] = data['Date'].dt.year
data_2020_2022 = data[data['Year'].between(2020, 2022)].drop(columns=['Year'])

# Set 'Date' as the index
data_2020_2022.set_index("Date", inplace=True)

# Extract BSE (SENSEX) as the dependent variable and all others as independent variables
y = data_2020_2022['SENSEX']  # Dependent variable
X = data_2020_2022.drop(columns=['SENSEX'])  # Independent variables

# Add a constant to the independent variables matrix (for the intercept term)
X = sm.add_constant(X)

# Fit the linear regression model
model = sm.OLS(y, X).fit()

# Get the Adjusted R-squared value
adjusted_r_squared = model.rsquared_adj

# Get the F-statistic and its p-value (Significance of F)
f_stat = model.fvalue
f_p_value = model.f_pvalue

# Display the results
print(f"Adjusted R-squared: {adjusted_r_squared:.4f}")
print(f"F-statistic: {f_stat:.4f}")
print(f"Significance of F (p-value): {f_p_value:.4e}")

# Save results to a text file in Google Drive
output_file = "/content/drive/MyDrive/DSFM Project/regression_results.txt"
with open(output_file, "w") as file:
    file.write(f"Adjusted R-squared: {adjusted_r_squared:.4f}\n")
    file.write(f"F-statistic: {f_stat:.4f}\n")
    file.write(f"Significance of F (p-value): {f_p_value:.4e}\n")

print(f"Regression results saved to {output_file}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from tabulate import tabulate

# Read the CSV file
csv_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(csv_file, parse_dates=["Date"])

# Drop the Date column for calculations (consider the entire dataset)
data_filtered = data.drop(columns=["Date"])

# Calculate statistics
stats = {
    "Particulars": [
        "Mean", "Standard Error", "Median", "Stan Deviation", "Sample Var",
        "Kurtosis", "Skewness", "Range", "Minimum", "Maximum", "Sum", "Count"
    ]
}

# Perform calculations for each index
for col in data_filtered.columns:
    col_stats = [
        np.mean(data_filtered[col]),
        np.std(data_filtered[col]) / np.sqrt(len(data_filtered[col])),  # Standard Error
        np.median(data_filtered[col]),
        np.std(data_filtered[col]),  # Standard Deviation
        np.var(data_filtered[col]),  # Sample Variance
        data_filtered[col].kurtosis(),  # Kurtosis
        data_filtered[col].skew(),  # Skewness
        np.max(data_filtered[col]) - np.min(data_filtered[col]),  # Range
        np.min(data_filtered[col]),
        np.max(data_filtered[col]),
        np.sum(data_filtered[col]),
        len(data_filtered[col])
    ]
    stats[col] = col_stats

# Convert stats dictionary to DataFrame
stats_df = pd.DataFrame(stats)

# Display the table
print("Table 3. Descriptive statistics of popular international indices for the period 2018-2022")
print(tabulate(stats_df, headers="keys", tablefmt="grid"))

# Save table as an image
fig, ax = plt.subplots(figsize=(12, 6))
ax.axis("tight")
ax.axis("off")
table = ax.table(cellText=stats_df.values, colLabels=stats_df.columns, loc="center", cellLoc="center")

# Save as an image file
image_path = "/content/drive/MyDrive/DSFM Project/descriptive_statistics_2018_2022.png"
plt.savefig(image_path, bbox_inches="tight", dpi=300)

print(f"Descriptive statistics table saved as an image at {image_path}")

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from google.colab import drive

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Set 'Date' as the index
data.set_index("Date", inplace=True)

# Calculate Pearson's correlation coefficients for the entire dataset
correlation_matrix = data.corr(method='pearson')

# Plot the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(
    correlation_matrix,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    linewidths=0.5,
    annot_kws={"size": 10}
)
plt.title("Pearsonâ€™s correlation coefficients of popular international stock indices (2018-2022)", fontsize=12)
plt.xticks(rotation=45, fontsize=10)
plt.yticks(fontsize=10)
plt.tight_layout()

# Save the plot as an image in Google Drive
correlation_plot_file = "/content/drive/MyDrive/DSFM Project/indices_correlation_2018_2022.png"
plt.savefig(correlation_plot_file, dpi=300)
plt.show()

print(f"Correlation plot saved to {correlation_plot_file}")

import pandas as pd
import matplotlib.pyplot as plt

# Load the monthly returns CSV file
returns_file = "/content/drive/MyDrive/DSFM Project/indices_monthly_returns.csv"
data = pd.read_csv(returns_file, parse_dates=["Date"])

# Set 'Date' as the index
data.set_index("Date", inplace=True)

# Plot the monthly returns for all indices
plt.figure(figsize=(10, 6))

# Loop through each column to plot individual indices
for column in data.columns:
    plt.plot(data.index, data[column], label=column)

# Add labels, title, and legend
plt.xlabel("Month wise", fontsize=12)
plt.ylabel("Monthly Returns", fontsize=12)
plt.title("Chart 1. Five years return (2018 â€“ 2022) analysis index wise", fontsize=14)
plt.legend(loc="upper left", fontsize=10, ncol=2)  # Adjust legend placement and size
plt.grid(visible=True, linestyle="--", alpha=0.5)  # Optional: Add grid for better readability

# Format x-axis for better visibility
plt.xticks(fontsize=10, rotation=45)
plt.yticks(fontsize=10)

# Save the plot as an image
plot_path = "/content/drive/MyDrive/DSFM Project/five_years_return_analysis.png"
plt.savefig(plot_path, dpi=300, bbox_inches="tight")
plt.show()

print(f"Plot saved to {plot_path}")

